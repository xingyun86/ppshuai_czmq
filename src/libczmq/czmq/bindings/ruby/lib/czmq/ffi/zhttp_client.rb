################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################

module CZMQ
  module FFI

    # Provides an http client, allowing multiple requests simultaneously and integrate easily with zpoller.
    # @note This class is 100% generated using zproject.
    class ZhttpClient
      # Raised when one tries to use an instance of {ZhttpClient} after
      # the internal pointer to the native object has been nullified.
      class DestroyedError < RuntimeError; end

      # Boilerplate for self pointer, initializer, and finalizer
      class << self
        alias :__new :new
      end
      # Attaches the pointer _ptr_ to this instance and defines a finalizer for
      # it if necessary.
      # @param ptr [::FFI::Pointer]
      # @param finalize [Boolean]
      def initialize(ptr, finalize = true)
        @ptr = ptr
        if @ptr.null?
          @ptr = nil # Remove null pointers so we don't have to test for them.
        elsif finalize
          @finalizer = self.class.create_finalizer_for @ptr
          ObjectSpace.define_finalizer self, @finalizer
        end
      end
      # @param ptr [::FFI::Pointer]
      # @return [Proc]
      def self.create_finalizer_for(ptr)
        Proc.new do
          ptr_ptr = ::FFI::MemoryPointer.new :pointer
          ptr_ptr.write_pointer ptr
          ::CZMQ::FFI.zhttp_client_destroy ptr_ptr
        end
      end
      # @return [Boolean]
      def null?
        !@ptr or @ptr.null?
      end
      # Return internal pointer
      # @return [::FFI::Pointer]
      def __ptr
        raise DestroyedError unless @ptr
        @ptr
      end
      # So external Libraries can just pass the Object to a FFI function which expects a :pointer
      alias_method :to_ptr, :__ptr
      # Nullify internal pointer and return pointer pointer.
      # @note This detaches the current instance from the native object
      #   and thus makes it unusable.
      # @return [::FFI::MemoryPointer] the pointer pointing to a pointer
      #   pointing to the native object
      def __ptr_give_ref
        raise DestroyedError unless @ptr
        ptr_ptr = ::FFI::MemoryPointer.new :pointer
        ptr_ptr.write_pointer @ptr
        __undef_finalizer if @finalizer
        @ptr = nil
        ptr_ptr
      end
      # Undefines the finalizer for this object.
      # @note Only use this if you need to and can guarantee that the native
      #   object will be freed by other means.
      # @return [void]
      def __undef_finalizer
        ObjectSpace.undefine_finalizer self
        @finalizer = nil
      end

      # Create a new http client
      # @param verbose [Boolean]
      # @return [CZMQ::ZhttpClient]
      def self.new(verbose)
        verbose = !(0==verbose||!verbose) # boolean
        ptr = ::CZMQ::FFI.zhttp_client_new(verbose)
        __new ptr
      end

      # Destroy an http client
      #
      # @return [void]
      def destroy()
        return unless @ptr
        self_p = __ptr_give_ref
        result = ::CZMQ::FFI.zhttp_client_destroy(self_p)
        result
      end

      # Send a get request to the url, headers is optional.
      # Use userp to identify response when making multiple requests simultaneously.
      #
      # @param url [String, #to_s, nil]
      # @param headers [Zlistx, #__ptr]
      # @param userp [::FFI::Pointer, #to_ptr]
      # @return [Integer]
      def get(url, headers, userp)
        raise DestroyedError unless @ptr
        self_p = @ptr
        headers = headers.__ptr if headers
        result = ::CZMQ::FFI.zhttp_client_get(self_p, url, headers, userp)
        result
      end

      # Receive the response for one of the requests. Blocks until a response is ready.
      # Use userp to identify the request.
      #
      # @param response_code [::FFI::Pointer, #to_ptr]
      # @param data [#__ptr_give_ref]
      # @param userp [::FFI::Pointer, #to_ptr]
      # @return [Integer]
      def recv(response_code, data, userp)
        raise DestroyedError unless @ptr
        self_p = @ptr
        data = data.__ptr_give_ref
        result = ::CZMQ::FFI.zhttp_client_recv(self_p, response_code, data, userp)
        result
      end

      # Self test of this class.
      #
      # @param verbose [Boolean]
      # @return [void]
      def self.test(verbose)
        verbose = !(0==verbose||!verbose) # boolean
        result = ::CZMQ::FFI.zhttp_client_test(verbose)
        result
      end
    end
  end
end

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
