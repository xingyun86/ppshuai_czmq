################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
from . import utils
from . import destructors
libczmq_destructors = destructors.lib

class ZhttpClient(object):
    """
    Provides an http client, allowing multiple requests simultaneously and integrate easily with zpoller.
    """

    def __init__(self, verbose):
        """
        Create a new http client
        """
        p = utils.lib.zhttp_client_new(verbose)
        if p == utils.ffi.NULL:
            raise MemoryError("Could not allocate person")

        # ffi.gc returns a copy of the cdata object which will have the
        # destructor called when the Python object is GC'd:
        # https://cffi.readthedocs.org/en/latest/using.html#ffi-interface
        self._p = utils.ffi.gc(p, libczmq_destructors.zhttp_client_destroy_py)

    def get(self, url, headers, userp):
        """
        Send a get request to the url, headers is optional.
        Use userp to identify response when making multiple requests simultaneously.
        """
        return utils.lib.zhttp_client_get(self._p, utils.to_bytes(url), headers._p, userp._p)

    def recv(self, response_code, data, userp):
        """
        Receive the response for one of the requests. Blocks until a response is ready.
        Use userp to identify the request.
        """
        return utils.lib.zhttp_client_recv(self._p, response_code, data._p, userp._p)

    def test(verbose):
        """
        Self test of this class.
        """
        utils.lib.zhttp_client_test(verbose)

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
